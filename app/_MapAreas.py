# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mower_map/MapAreas.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mower_map.msg

class MapAreas(genpy.Message):
  _md5sum = "d3c611e824aac319a11694c960ef24a8"
  _type = "mower_map/MapAreas"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 mapWidth
float64 mapHeight
float64 mapCenterX
float64 mapCenterY
mower_map/MapArea[] navigationAreas
mower_map/MapArea[] mowingAreas
================================================================================
MSG: mower_map/MapArea
string name
geometry_msgs/Polygon area
geometry_msgs/Polygon[] obstacles

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['mapWidth','mapHeight','mapCenterX','mapCenterY','navigationAreas','mowingAreas']
  _slot_types = ['float64','float64','float64','float64','mower_map/MapArea[]','mower_map/MapArea[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mapWidth,mapHeight,mapCenterX,mapCenterY,navigationAreas,mowingAreas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapAreas, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mapWidth is None:
        self.mapWidth = 0.
      if self.mapHeight is None:
        self.mapHeight = 0.
      if self.mapCenterX is None:
        self.mapCenterX = 0.
      if self.mapCenterY is None:
        self.mapCenterY = 0.
      if self.navigationAreas is None:
        self.navigationAreas = []
      if self.mowingAreas is None:
        self.mowingAreas = []
    else:
      self.mapWidth = 0.
      self.mapHeight = 0.
      self.mapCenterX = 0.
      self.mapCenterY = 0.
      self.navigationAreas = []
      self.mowingAreas = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.mapWidth, _x.mapHeight, _x.mapCenterX, _x.mapCenterY))
      length = len(self.navigationAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.navigationAreas:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.area
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.obstacles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacles:
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.mowingAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.mowingAreas:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = val1.area
        length = len(_v2.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.obstacles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacles:
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.navigationAreas is None:
        self.navigationAreas = None
      if self.mowingAreas is None:
        self.mowingAreas = None
      end = 0
      _x = self
      start = end
      end += 32
      (_x.mapWidth, _x.mapHeight, _x.mapCenterX, _x.mapCenterY,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.navigationAreas = []
      for i in range(0, length):
        val1 = mower_map.msg.MapArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v3 = val1.area
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v3.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v3.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacles = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Polygon()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point32()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.points.append(val3)
          val1.obstacles.append(val2)
        self.navigationAreas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mowingAreas = []
      for i in range(0, length):
        val1 = mower_map.msg.MapArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v4 = val1.area
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v4.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v4.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacles = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Polygon()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point32()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.points.append(val3)
          val1.obstacles.append(val2)
        self.mowingAreas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.mapWidth, _x.mapHeight, _x.mapCenterX, _x.mapCenterY))
      length = len(self.navigationAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.navigationAreas:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.area
        length = len(_v5.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.obstacles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacles:
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.mowingAreas)
      buff.write(_struct_I.pack(length))
      for val1 in self.mowingAreas:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v6 = val1.area
        length = len(_v6.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v6.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.obstacles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.obstacles:
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.navigationAreas is None:
        self.navigationAreas = None
      if self.mowingAreas is None:
        self.mowingAreas = None
      end = 0
      _x = self
      start = end
      end += 32
      (_x.mapWidth, _x.mapHeight, _x.mapCenterX, _x.mapCenterY,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.navigationAreas = []
      for i in range(0, length):
        val1 = mower_map.msg.MapArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v7 = val1.area
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v7.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v7.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacles = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Polygon()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point32()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.points.append(val3)
          val1.obstacles.append(val2)
        self.navigationAreas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mowingAreas = []
      for i in range(0, length):
        val1 = mower_map.msg.MapArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v8 = val1.area
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v8.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v8.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.obstacles = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Polygon()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point32()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.points.append(val3)
          val1.obstacles.append(val2)
        self.mowingAreas.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
